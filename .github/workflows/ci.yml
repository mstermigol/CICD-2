name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Asegura pytest/coverage si no estÃ¡n en requirements
          pip install pytest pytest-cov

      - name: Run Black (Formatter)
        run: black app --check

      - name: Run Pylint (Linter)
        run: pylint app --output-format=text --fail-under=9 > pylint-report.txt || true

      - name: Run Flake8 (Linter)
        run: flake8 app --output-file=flake8-report.txt || true

      - name: Run Unit Tests with pytest and Coverage
        run: |
          pytest --ignore=tests/test_acceptance_app.py --ignore=tests/test_smoke_app.py \
                 --cov=app --cov-branch \
                 --cov-report=term-missing \
                 --cov-report=xml:coverage.xml \
                 --cov-report=html

      - name: Run Acceptance Tests
        env:
           APP_BASE_URL: http://localhost:8000
        run: |
          gunicorn --workers=2 --bind=0.0.0.0:8000 app.app:app &
          GUNICORN_PID=$!
          sleep 5
          pytest -p no:cov tests/test_acceptance_app.py --html=acceptance_report.html
          kill $GUNICORN_PID

      - name: Upload Test Reports Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: |
            htmlcov/
            coverage.xml
            pylint-report.txt
            flake8-report.txt

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # --- Pasos de Docker ---
      - name: Set up QEMU
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Compute lowercase image name
        id: vars
        run: |
          echo "repo_lc=$(echo '${{ github.event.repository.name }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.vars.outputs.repo_lc }}:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.vars.outputs.repo_lc }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
